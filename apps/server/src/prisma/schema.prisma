generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  name         String
  email        String          @unique
  password     String
  phone        String?
  type         String          @default("store")
  is_active    Boolean         @default(true)
  is_deleted   Boolean         @default(false)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  deleted_at   DateTime?
  is_superuser Boolean?        @default(false)
  orders       PurchaseOrder[]
  stores       Store[]
}

model Store {
  id          Int             @id @default(autoincrement())
  name        String
  marketplace String
  api_client  String
  api_secret  String
  is_active   Boolean         @default(true)
  is_deleted  Boolean         @default(false)
  user_id     Int
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  deleted_at  DateTime?
  orders      PurchaseOrder[]
  user        User            @relation(fields: [user_id], references: [id])
}

model Catalog {
  id             Int      @id @default(autoincrement())
  asin           String   @unique
  name           String
  brand          String
  buying_price   String
  selling_price  String
  sku            String?
  upc            String?
  moq            Int      @default(100)
  forced_selling_price            Boolean      @default(false)
  buybox_price   String?
  amazon_fee     String?
  profit         String?
  margin         String?
  roi            Float?
  selling_status Boolean  @default(false)
  supplier       String?
  image_url      String?
  wfs_id         String?
  walmart_buybox String?
  walmart_fees   String?
  walmart_profit String?
  walmart_margin String?
  walmart_roi    String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  profitable     Boolean  @default(false)
  brand_id       Int?
  brands         Brand? @relation(fields: [brand_id], references: [id])
  stock_level    Int?
}

model PurchaseOrder {
  id               Int                 @id @default(autoincrement())
  order_placed_at  DateTime            @default(now())
  order_status     String              @default("received")
  is_draft         Boolean             @default(false)
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  paymentMethod    String?
  prepRequired     String?
  ungateAssistance String?
  billingCountry   String?
  firstName        String?
  lastName         String?
  email            String?
  phone            String?
  company          String?
  storefront       String?
  street           String?
  city             String?
  state            String?
  zip              String?
  store_id         Int
  user_id          Int
  order_id         String?             @unique
  is_api_succeed   Boolean?            @default(false)
  store            Store               @relation(fields: [store_id], references: [id])
  user             User                @relation(fields: [user_id], references: [id])
  items            PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id                Int           @id @default(autoincrement())
  asin              String
  title             String
  brand             String
  unit_price        Float
  quantity          Int
  sku               String?
  upc               String?
  supplier          String?
  purchase_order_id Int
  purchase_order    PurchaseOrder @relation(fields: [purchase_order_id], references: [id])
}

model Brand {
  id                        Int      @id @default(autoincrement())
  name                      String
  profitable_and_selling    Int      @default(0)
  all_catalog_count         Int      @default(0)
  merged_to                 Int?
  last_item_inserted_at     DateTime @default(now()) @db.Timestamp(6)
  created_at                DateTime @default(now()) @db.Timestamp(6)
  updated_at                DateTime @default(now()) @updatedAt @db.Timestamp(6)
  catalogs                  Catalog[]
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  user_id    Int
  catalog_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, catalog_id])
}

model CatalogImport {
  id             Int      @id @default(autoincrement())
  asin           String   @unique
  name           String
  brand          String
  buying_price   String
  selling_price  String
  sku            String?
  upc            String?
  moq            Int      @default(100)
  buybox_price   String?
  amazon_fee     String?
  profit         String?
  margin         String?
  roi            Float?
  selling_status Boolean  @default(false)
  supplier       String?
  image_url      String?
  wfs_id         String?
  walmart_buybox String?
  walmart_fees   String?
  walmart_profit String?
  walmart_margin String?
  walmart_roi    String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  profitable     Boolean  @default(false)
}